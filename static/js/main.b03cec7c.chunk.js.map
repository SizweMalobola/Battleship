{"version":3,"sources":["gameControllerStyles.module.css","headerStyles.module.css","components/PlayerStatus.js","components/PlayerBoard.js","logic.js","components/GameController.js","components/Header.js","App.js","reportWebVitals.js","index.js","playerStatus.module.css","playerBoard.module.css"],"names":["module","exports","PlayerStatus","props","state","this","title","isGameOver","player","dimension","changeDimension","shipsPositioned","turn","className","styles","playerName","panel","prompt","btn","onClick","pill","playerBoard","sunkShips","length","Component","classNames","require","PlayerBoard","boardRef","React","createRef","renderMisses","bind","renderHits","renderSunkShips","showPreview","misses","forEach","i","current","children","firstElementChild","classList","add","miss","hits","hit","arr","sunk","boardDivChildren","Array","from","child","index","previewState","previewArray","includes","toggle","preview","randoPlacement","fleet","coordinates","ship","clickHandler","setPreview","resetPreview","playerPlacement","ref","id","onMouseOut","board","map","b","block","onMouseOver","position","find","ar","e","target","Ship","shipStructure","fill","shipClass","l","getShipClass","every","val","GameBoard","coordinatesArray","indexOf","push","cap","parseInt","isShared","coordiantesArray","shared","obj","isSunk","Player","GameController","human","computer","gameOver","isPreviewValid","randomPlacement","compsTurn","changeTurn","disableButtons","enableButtons","createShip","num","setState","humanStateClone","Object","assign","computerStateClone","shipsPlaced","randoPosition","Math","round","random","randoDimension","placeShip","console","log","parentElement","receiveAttack","btnArray","querySelectorAll","setTimeout","btnList","setAttribute","removeAttribute","isFleetSunk","startIndex","isValid","indexEnd","buttonsArray","document","winnerPanel","playAgain","restart","Header","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.b03cec7c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"game-container\":\"gameControllerStyles_game-container__1kRNe\",\"player\":\"gameControllerStyles_player__1Ae0B\",\"winnerPanel\":\"gameControllerStyles_winnerPanel__8tltV\",\"restart\":\"gameControllerStyles_restart__23Pzu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"headerStyles_title__1wRWs\",\"disc_div\":\"headerStyles_disc_div__2tlVB\"};","import React, { Component } from \"react\";\nimport styles from \"../playerStatus.module.css\";\n\nexport default class PlayerStatus extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {};\n  }\n\n  render() {\n    const { title, isGameOver,player,dimension,changeDimension,shipsPositioned,turn } = this.props;\n    return (\n      <div>\n        <h1 className={styles.title}>{title}</h1>\n        {!isGameOver && (\n          player.playerName === \"Human\"? <div className={styles.panel}>\n            {shipsPositioned !== 5?<p className={styles.prompt}>position your ships</p>:<p className={styles.prompt}>Attack Computer's Board</p>}\n            {shipsPositioned !==5?<div><button className={styles.btn} onClick={()=>{changeDimension()}}>Dimension : {dimension} </button><p className={styles.pill} >ships left to place: {5 - shipsPositioned}</p></div>:<div><p className={styles[\"turn-pill\"]}>{turn === \"Human\"? \"your turn\": \"waiting..\"}</p><p className={styles.pill} >Ships Remaining: {5 - player.playerBoard.sunkShips.length}</p></div>}</div>\n          :<div className={styles.panel}>\n            {shipsPositioned !== 5? <p className={styles.prompt} >waiting...</p>:<p className={styles.prompt} >click on this board to sink their ships</p>}\n            {shipsPositioned !== 5?<div>waiting for you to position your ships</div>:<div><p className={styles[\"turn-pill\"]} >{turn === \"Computer\"? \"your turn\": \"waiting..\"}</p><p className={styles.pill}>Ships Remaining: {5 - player.playerBoard.sunkShips.length}</p></div>}\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { GiExplosionRays, GiShipWreck, GiWaterSplash } from \"react-icons/gi\";\nimport styles from \"../playerBoard.module.css\";\nconst classNames = require(\"classnames\");\n\nexport default class PlayerBoard extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {};\n    this.boardRef = React.createRef();\n    this.renderMisses = this.renderMisses.bind(this);\n    this.renderHits = this.renderHits.bind(this);\n    this.renderSunkShips = this.renderSunkShips.bind(this);\n    this.showPreview = this.showPreview.bind(this);\n  }\n  renderMisses() {\n    this.props.player.playerBoard.misses.forEach((i) => {\n      const boardDivContainer = this.boardRef.current;\n      const block = boardDivContainer.children[i].firstElementChild;\n      block.classList.add(styles.miss);\n    });\n  }\n  renderHits() {\n    this.props.player.playerBoard.hits.forEach((i) => {\n      const boardDivContainer = this.boardRef.current;\n      const block = boardDivContainer.children[i].firstElementChild;\n      block.classList.add(styles.hit);\n    });\n  }\n  renderSunkShips() {\n    this.props.player.playerBoard.sunkShips.forEach((arr) => {\n      for (const i of arr) {\n        const boardDivContainer = this.boardRef.current;\n        const block = boardDivContainer.children[i].firstElementChild;\n        block.classList.add(styles.sunk);\n      }\n    });\n  }\n  showPreview() {\n    const boardDivChildren = this.boardRef.current.children;\n    const boardChildrenArray = Array.from(boardDivChildren);\n    boardChildrenArray.forEach((child, index) => {\n      if (this.props.previewState.previewArray.includes(index)) {\n        child.firstElementChild.classList.toggle(styles.preview, true);\n        // Todo show invalid previews in a different color\n      } else {\n        child.firstElementChild.classList.toggle(styles.preview, false);\n      }\n    });\n  }\n  componentDidMount() {\n    if (this.props.player.playerName === \"Computer\") {\n      this.props.randoPlacement();\n    }\n  }\n  componentDidUpdate() {\n    //   displays placed ships\n    if (this.props.player.playerName === \"Human\") {\n      for (const ship of this.props.player.playerBoard.fleet) {\n        ship.coordinates.forEach((i) => {\n          const boardDivContainer = this.boardRef.current;\n          const block = boardDivContainer.children[i].firstElementChild;\n          block.classList.add(styles.ship);\n        });\n      }\n    }\n    // renders misses\n    this.renderMisses();\n    // renders hits\n    this.renderHits();\n    // render sunk ships\n    this.renderSunkShips();\n    // render preview\n    if (this.props.player.playerName === \"Human\") {\n      this.showPreview(this.props.previewState);\n    }\n  }\n\n  render() {\n    const {\n      player,\n      clickHandler,\n      dimension,\n      setPreview,\n      resetPreview,\n      playerPlacement,\n    } = this.props;\n    return player.playerName === \"Human\" ? (\n      <div\n        ref={this.boardRef}\n        id={player.playerName + \"-board\"}\n        className={classNames(styles[\"game-board\"], \"board\")}\n        onMouseOut={() => {\n          resetPreview();\n        }}\n      >\n        {player.playerBoard.board.map((b, index) => {\n          return (\n            <div id={b} className={styles.block} key={b + index}>\n              <button\n                className={styles.btn}\n                onClick={() => {\n                  playerPlacement();\n                }}\n                onMouseOver={() => {\n                  setPreview({ position: index, dimension: dimension });\n                }}\n              >\n                {(player.playerBoard.misses.includes(index) && (\n                  <GiWaterSplash />\n                )) ||\n                  (player.playerBoard.sunkShips.find((ar) => {\n                    return ar.includes(index);\n                  }) && <GiShipWreck />) ||\n                  (player.playerBoard.hits.includes(index) && (\n                    <GiExplosionRays />\n                  ))}\n              </button>\n            </div>\n          );\n        })}\n      </div>\n    ) : (\n      <div\n        ref={this.boardRef}\n        id={player.playerName + \"-board\"}\n        className={classNames(styles[\"game-board\"], \"board\")}\n      >\n        {player.playerBoard.board.map((b, index) => {\n          return (\n            <div id={b} className={styles.block} key={b + index}>\n              <button\n                className={styles.btn}\n                onClick={(e) => {\n                  clickHandler(e.target, index);\n                }}\n              >\n                {(player.playerBoard.misses.includes(index) && (\n                  <GiWaterSplash />\n                )) ||\n                  (player.playerBoard.sunkShips.find((ar) => {\n                    return ar.includes(index);\n                  }) && <GiShipWreck />) ||\n                  (player.playerBoard.hits.includes(index) && (\n                    <GiExplosionRays />\n                  ))}\n              </button>\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n}\n","export default class Ship {\n  constructor(length) {\n    const getShipClass = (l) => {\n      let ship;\n      switch (l) {\n        case 5:\n          ship = \"carrier\";\n          break;\n        case 4:\n          ship = \"battleship\";\n          break;\n        case 3:\n          ship = \"submarine\";\n          break;\n\n        default:\n          ship = \"destroyer\";\n          break;\n      }\n      return ship;\n    };\n\n    this.length = length;\n    this.shipStructure = new Array(length).fill(null);\n    this.shipClass = getShipClass(this.length);\n  }\n  hit(position) {\n    if (position >= 0 && position <= this.length - 1) {\n      this.shipStructure[position] = \"hit\";\n      return true;\n    } else {\n      return false;\n    }\n  }\n  getStructuralIntegrityAt(position) {\n    return this.shipStructure[position];\n  }\n  isSunk() {\n    return this.shipStructure.every((val) => val === \"hit\");\n  }\n}\nclass GameBoard {\n  constructor() {\n    this.board = [\n      \"1A\",\n      \"1B\",\n      \"1C\",\n      \"1D\",\n      \"1E\",\n      \"1F\",\n      \"1G\",\n      \"1H\",\n      \"1I\",\n      \"1J\",\n      \"2A\",\n      \"2B\",\n      \"2C\",\n      \"2D\",\n      \"2E\",\n      \"2F\",\n      \"2G\",\n      \"2H\",\n      \"2I\",\n      \"2J\",\n      \"3A\",\n      \"3B\",\n      \"3C\",\n      \"3D\",\n      \"3E\",\n      \"3F\",\n      \"3G\",\n      \"3H\",\n      \"3I\",\n      \"3J\",\n      \"4A\",\n      \"4B\",\n      \"4C\",\n      \"4D\",\n      \"4E\",\n      \"4F\",\n      \"4G\",\n      \"4H\",\n      \"4I\",\n      \"4J\",\n      \"5A\",\n      \"5B\",\n      \"5C\",\n      \"5D\",\n      \"5E\",\n      \"5F\",\n      \"5G\",\n      \"5H\",\n      \"5I\",\n      \"5J\",\n      \"6A\",\n      \"6B\",\n      \"6C\",\n      \"6D\",\n      \"6E\",\n      \"6F\",\n      \"6G\",\n      \"6H\",\n      \"6I\",\n      \"6J\",\n      \"7A\",\n      \"7B\",\n      \"7C\",\n      \"7D\",\n      \"7E\",\n      \"7F\",\n      \"7G\",\n      \"7H\",\n      \"7I\",\n      \"7J\",\n      \"8A\",\n      \"8B\",\n      \"8C\",\n      \"8D\",\n      \"8E\",\n      \"8F\",\n      \"8G\",\n      \"8H\",\n      \"8I\",\n      \"8J\",\n      \"9A\",\n      \"9B\",\n      \"9C\",\n      \"9D\",\n      \"9E\",\n      \"9F\",\n      \"9G\",\n      \"9H\",\n      \"9I\",\n      \"9J\",\n      \"10A\",\n      \"10B\",\n      \"10C\",\n      \"10D\",\n      \"10E\",\n      \"10F\",\n      \"10G\",\n      \"10H\",\n      \"10I\",\n      \"10J\",\n    ];\n    this.fleet = [];\n    this.hits = [];\n    this.misses = [];\n    this.sunkShips = [];\n  }\n  placeShip(ship, coordinates) {\n    // ship object is pushed to fleet array with coordiantes array representing where the ship is placed on the board\n    let start = this.board.indexOf(coordinates.position);\n    let coordinatesArray = [];\n    let current = start;\n    // the rest of the coordinates are going to be determined by wether the ship goes horizontal or vertical\n    if (coordinates.dimension === \"vertical\") {\n      let cap = 99;\n\n      if (current + (ship.length - 1) * 10 > cap) {\n        return \"pick different coordinates\";\n      }\n\n      while (coordinatesArray.length !== ship.length) {\n        coordinatesArray.push(current);\n        current += 10;\n      }\n    } else if (coordinates.dimension === \"horizontal\") {\n      // check wether given coordinates will wrap to the row below\n      let cap = (parseInt(current / 10, 10) + 1) * 10;\n      cap -= 1;\n      if (current + ship.length - 1 > cap) {\n        return \"pick different coordinates\";\n      }\n      while (coordinatesArray.length !== ship.length) {\n        coordinatesArray.push(current);\n        current += 1;\n      }\n    }\n    // set the coordinates on the ship object and push ship object to fleet\n    // before I add the coordinates to my ship object I first have to check in the fleet if any of the coordinates I'm trying to add to ship have already been taken by another ship\n    if (this.isShared(coordinatesArray)) {\n      return \"you have shared coordinates\";\n    } else {\n      ship.coordinates = coordinatesArray;\n      this.fleet.push(ship);\n    }\n  }\n  isShared(coordiantesArray) {\n    let shared = false;\n    coordiantesArray.forEach((i) => {\n      for (const obj of this.fleet) {\n        if (obj.coordinates.includes(i)) {\n          shared = true;\n        }\n      }\n    });\n    return shared;\n  }\n  receiveAttack(coordinates) {\n    // i represents the a position on the board.\n    let i = this.board.indexOf(coordinates);\n    let hit = false;\n    for (const obj of this.fleet) {\n      if (obj.coordinates.includes(i)) {\n        let target = obj.coordinates.indexOf(i);\n        obj.hit(target);\n        this.hits.push(i);\n        hit = true;\n        if (obj.isSunk()) {\n          this.sunkShips.push(obj.coordinates);\n        }\n      }\n    }\n    if (!hit) {\n      this.misses.push(i);\n    }\n  }\n  // game should be able to report whether or not all of their ships have been sunk.\n  isFleetSunk() {\n    // if all the ships are sunk, isFleetSunk method will return true else false.\n    return this.fleet.every((ship) => {\n      return ship.isSunk() === true;\n    });\n  }\n}\nclass Player {\n  constructor(player, board) {\n    this.playerName = player;\n    this.playerBoard = board;\n  }\n}\n\nexport { GameBoard, Player, Ship };\n","import React, { Component } from \"react\";\nimport PlayerStatus from \"./PlayerStatus\";\nimport { VscDebugRestart } from \"react-icons/vsc\";\nimport styles from \"../gameControllerStyles.module.css\";\nimport PlayerBoard from \"./PlayerBoard\";\nimport { GameBoard, Player, Ship } from \"../logic\";\n\nexport default class GameController extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      human: new Player(\"Human\", new GameBoard()),\n      computer: new Player(\"Computer\", new GameBoard()),\n      gameOver: false,\n      turn: \"Human\",\n      // dimenstion state\n      dimension: \"horizontal\",\n      // preview state\n      preview: { previewArray: [], isPreviewValid: null },\n      // sorte\n      shipsPositioned: 0,\n      //   Im thinking of setting a state to keep track on the game's progress.\n    };\n    this.randomPlacement = this.randomPlacement.bind(this);\n    this.clickHandler = this.clickHandler.bind(this);\n    this.compsTurn = this.compsTurn.bind(this);\n    this.isGameOver = this.isGameOver.bind(this);\n    this.changeTurn = this.changeTurn.bind(this);\n    this.disableButtons = this.disableButtons.bind(this);\n    this.enableButtons = this.enableButtons.bind(this);\n    this.changeDimension = this.changeDimension.bind(this);\n    this.setPreview = this.setPreview.bind(this);\n    this.resetPreview = this.resetPreview.bind(this);\n    this.playerPlacement = this.playerPlacement.bind(this);\n    this.createShip = this.createShip.bind(this);\n  }\n  // methods\n  createShip(num) {\n    let ship;\n    switch (num) {\n      case 0:\n        ship = new Ship(5);\n        break;\n      case 1:\n        ship = new Ship(4);\n        break;\n      case 2:\n        ship = new Ship(3);\n        break;\n\n      default:\n        ship = new Ship(2);\n        break;\n    }\n    return ship;\n  }\n  //Todo Add restart game functionality\n  playAgain() {\n    this.setState({\n      human: new Player(\"Human\", new GameBoard()),\n      computer: new Player(\"Computer\", new GameBoard()),\n      gameOver: false,\n      turn: \"Human\",\n      dimension: \"horizontal\",\n      preview: { previewArray: [], isPreviewValid: null },\n      shipsPositioned: 0,\n    });\n    //Todo Find a way to clear both playerBoards\n    this.randomPlacement();\n  }\n  changeTurn() {\n    this.setState((state) => {\n      return { turn: state.turn === \"Human\" ? \"Computer\" : \"Human\" };\n    });\n  }\n  //! this method does the same things as Gameboard.placeShips() instance method\n  playerPlacement() {\n    const previewState = this.state.preview;\n    if (previewState.isPreviewValid && this.state.shipsPositioned !== 5) {\n      let ship = this.createShip(this.state.shipsPositioned);\n      ship.coordinates = previewState.previewArray;\n      let humanStateClone = Object.assign({}, this.state.human);\n      humanStateClone.playerBoard.fleet.push(ship);\n      this.setState({ human: humanStateClone });\n      this.setState((state) => {\n        return { shipsPositioned: state.shipsPositioned + 1 };\n      });\n    }\n  }\n  randomPlacement() {\n    const computerStateClone = Object.assign({}, this.state.computer);\n    const board = computerStateClone.playerBoard.board;\n    let shipsPlaced = 0;\n    while (shipsPlaced !== 5) {\n      let randoPosition = board[Math.round(Math.random() * 99)];\n      let randoDimension = Math.round(Math.random() * 1);\n      randoDimension = randoDimension ? \"horizontal\" : \"vertical\";\n      let ship = this.createShip(shipsPlaced);\n      computerStateClone.playerBoard.placeShip(ship, {\n        position: randoPosition,\n        dimension: randoDimension,\n      });\n      if (computerStateClone.playerBoard.fleet.length > shipsPlaced) {\n        shipsPlaced += 1;\n      }\n    }\n    this.setState({ computer: computerStateClone });\n  }\n  //   when block on computer board is clicked this function is run and computer board receives an attack.\n  clickHandler(target, index) {\n    const computerStateClone = Object.assign({}, this.state.computer);\n    // method short-circuits if ships from human player are positioned\n    if (this.state.shipsPositioned !== 5) {\n      return;\n    }\n    // method short-circuits if chosen coordinates to attack has already been attacked previously\n    if (\n      computerStateClone.playerBoard.misses.includes(index) ||\n      computerStateClone.playerBoard.hits.includes(index)\n    ) {\n      return console.log(\n        `You've already picked these coordinates homes. Try different ones.`\n      );\n    }\n    let coordinates = target.parentElement.id;\n    computerStateClone.playerBoard.receiveAttack(coordinates);\n    this.setState({ computer: computerStateClone });\n    // after a hit check wether all the ships are sunk on computer\n    if (this.isGameOver(this.state.computer)) {\n      this.setState({ gameOver: true });\n      console.log(\"game over Human guy wins\");\n    } else {\n      // if human player doesn't win round, computer makes its turn.\n      // disable computers buttons to prevent click while waiting for computer to make a move\n      let boardContainer = target.parentElement.parentElement;\n      let btnArray = boardContainer.querySelectorAll(\"button\");\n      this.disableButtons(btnArray);\n      this.changeTurn();\n      setTimeout(() => {\n        this.compsTurn(this.state.human);\n        this.enableButtons(btnArray);\n      }, 700);\n    }\n  }\n\n  compsTurn(player) {\n    const humanStateClone = Object.assign({}, player);\n    let target = Math.round(Math.random() * 99);\n    while (\n      humanStateClone.playerBoard.misses.includes(target) ||\n      humanStateClone.playerBoard.hits.includes(target)\n    ) {\n      target = Math.round(Math.random() * 99);\n    }\n    let coordinates = humanStateClone.playerBoard.board[target];\n    humanStateClone.playerBoard.receiveAttack(coordinates);\n    this.setState({ human: humanStateClone });\n    if (this.isGameOver(this.state.human)) {\n      this.setState({ gameOver: true });\n    } else {\n      this.changeTurn();\n    }\n  }\n  // function for disabling buttons\n  disableButtons(btnList) {\n    for (const btn of btnList) {\n      btn.setAttribute(\"disabled\", true);\n    }\n  }\n  enableButtons(btnList) {\n    for (const btn of btnList) {\n      btn.removeAttribute(\"disabled\");\n    }\n  }\n  isGameOver(player) {\n    return player.playerBoard.isFleetSunk();\n  }\n  changeDimension() {\n    this.setState((state) => {\n      return {\n        dimension: state.dimension === \"horizontal\" ? \"vertical\" : \"horizontal\",\n      };\n    });\n  }\n  // this function will be modelled after placeShip()\n  setPreview(coordinates) {\n    // stop review if all ships have been positioned\n    if (this.state.shipsPositioned === 5) {\n      return;\n    }\n    let ship = this.createShip(this.state.shipsPositioned);\n    // will take board index directly\n    let startIndex = coordinates.position;\n    let coordinatesArray = [];\n    // it shouldnt be valid if it exceeds cap and when coordinates are shared\n    let isValid = true;\n    if (coordinates.dimension === \"vertical\") {\n      let cap = 99;\n      let indexEnd = startIndex + (ship.length - 1) * 10;\n      if (indexEnd > cap) {\n        isValid = false;\n      }\n      for (let i = startIndex; i <= indexEnd; i += 10) {\n        coordinatesArray.push(i);\n        if (i >= cap) {\n          break;\n        }\n      }\n    } else if (coordinates.dimension === \"horizontal\") {\n      let cap = (parseInt(startIndex / 10, 10) + 1) * 10;\n      cap -= 1;\n      let indexEnd = startIndex + ship.length - 1;\n      if (indexEnd > cap) {\n        isValid = false;\n      }\n      for (let i = startIndex; i <= indexEnd; i++) {\n        coordinatesArray.push(i);\n        if (i >= cap) {\n          break;\n        }\n      }\n    }\n    // isShared\n    const fleet = this.state.human.playerBoard.fleet;\n    for (const i of coordinatesArray) {\n      for (const ship of fleet) {\n        if (ship.coordinates.includes(i)) {\n          isValid = false;\n        }\n      }\n    }\n    this.setState({\n      preview: { previewArray: coordinatesArray, isPreviewValid: isValid },\n    });\n  }\n  resetPreview() {\n    this.setState({\n      preview: { previewArray: [], isPreviewValid: null },\n    });\n  }\n  componentDidUpdate() {\n    // If game is over all buttons will become disabled\n    if (this.state.gameOver) {\n      const buttonsArray = document.querySelectorAll(\".board button\");\n      this.disableButtons(buttonsArray);\n    }\n  }\n\n  render() {\n    return (\n      <>\n        {this.state.gameOver && (\n          <div className={styles.winnerPanel}>\n            <h1>Winner is {this.state.turn}</h1>\n            <button\n              onClick={() => {\n                this.playAgain();\n              }}\n              className={styles.restart}\n            >\n              <VscDebugRestart />\n              Restart\n            </button>\n          </div>\n        )}\n        <div className={styles[\"game-container\"]}>\n          <div className={styles.player}>\n            <PlayerStatus\n              title=\"Human\"\n              isGameOver={this.state.gameOver}\n              player={this.state.human}\n              dimension={this.state.dimension}\n              changeDimension={this.changeDimension}\n              shipsPositioned={this.state.shipsPositioned}\n              turn={this.state.turn}\n            />\n            <PlayerBoard\n              player={this.state.human}\n              clickHandler={this.clickHandler}\n              dimension={this.state.dimension}\n              setPreview={this.setPreview}\n              previewState={this.state.preview}\n              resetPreview={this.resetPreview}\n              playerPlacement={this.playerPlacement}\n              compsTurn={this.compsTurn}\n            />\n          </div>\n          <div className={styles.player}>\n            <PlayerStatus\n              title=\"Super-Computer\"\n              isGameOver={this.state.gameOver}\n              player={this.state.computer}\n              shipsPositioned={this.state.shipsPositioned}\n            />\n            <PlayerBoard\n              player={this.state.computer}\n              randoPlacement={this.randomPlacement}\n              clickHandler={this.clickHandler}\n            />\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport styles from \"../headerStyles.module.css\";\n\nexport default class Header extends Component {\n  render() {\n    return (\n      <>\n        <h1 className={styles.title}>Battleship_</h1>\n        <div className={styles[\"disc_div\"]}>\n          <p>\n            Feel the authentic thrill of the battle when you wage war on the\n            high seas in the game of Battleship. Take charge and command your\n            own fleet to defeat the enemy.\n          </p>\n        </div>\n      </>\n    );\n  }\n}\n","import GameController from \"./components/GameController\";\nimport Header from \"./components/Header\";\n\nfunction App() {\n  return (\n    <div id=\"app-container\">\n      <Header />\n      <GameController />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"playerStatus_title__KN9KP\",\"panel\":\"playerStatus_panel__2XWuH\",\"prompt\":\"playerStatus_prompt__3tg6X\",\"btn\":\"playerStatus_btn__28vGk\",\"pill\":\"playerStatus_pill__3X5_y\",\"turn-pill\":\"playerStatus_turn-pill__3z9vu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"game-board\":\"playerBoard_game-board__1u8TC\",\"block\":\"playerBoard_block__2XyRn\",\"btn\":\"playerBoard_btn__Bwbv_\",\"ship\":\"playerBoard_ship__2Uiyj\",\"miss\":\"playerBoard_miss__1L8LF\",\"hit\":\"playerBoard_hit__GwBGl\",\"sunk\":\"playerBoard_sunk__1H91D\",\"preview\":\"playerBoard_preview__2RnSw\"};"],"sourceRoot":""}