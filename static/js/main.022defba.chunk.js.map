{"version":3,"sources":["gameControllerStyles.module.css","headerStyles.module.css","components/PlayerStatus.js","components/PlayerBoard.js","logic.js","components/GameController.js","components/Header.js","App.js","reportWebVitals.js","index.js","playerStatus.module.css","playerBoard.module.css"],"names":["module","exports","PlayerStatus","props","state","this","title","isGameOver","player","dimension","changeDimension","shipsPositioned","turn","className","styles","playerName","panel","prompt","btn","onClick","pill","playerBoard","sunkShips","length","Component","classNames","require","PlayerBoard","boardRef","React","createRef","renderMisses","bind","renderHits","renderSunkShips","showPreview","misses","forEach","i","block","current","children","firstElementChild","classList","add","miss","hits","hit","arr","sunk","Array","from","child","index","previewState","previewArray","includes","toggle","preview","randoPlacement","fleet","coordinates","ship","console","log","clickHandler","setPreview","resetPreview","playerPlacement","ref","id","onMouseOut","board","map","b","onMouseOver","position","find","ar","e","target","Ship","shipStructure","fill","shipClass","l","getShipClass","every","val","shipsArray","shipsArrayTwo","GameBoard","coordinatesArray","indexOf","push","cap","parseInt","isShared","array","shared","obj","isSunk","Player","GameController","human","computer","gameOver","isPreviewValid","randomPlacement","compsTurn","changeTurn","disableButtons","enableButtons","setState","humanStateClone","Object","assign","computerStateClone","shipsPlaced","shipIndex","randoPosition","Math","round","random","randoDimension","placeShip","parentElement","receiveAttack","btnArray","querySelectorAll","setTimeout","btnList","setAttribute","removeAttribute","isFleetSunk","startIndex","isValid","indexEnd","buttonsArray","document","winnerPanel","restart","Header","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":";4FACAA,EAAOC,QAAU,CAAC,iBAAiB,6CAA6C,OAAS,qCAAqC,YAAc,0CAA0C,QAAU,wC,mBCAhMD,EAAOC,QAAU,CAAC,MAAQ,4BAA4B,SAAW,iC,2KCE5CC,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,GAHI,E,0CAMnB,WACE,MAAoFC,KAAKF,MAAjFG,EAAR,EAAQA,MAAOC,EAAf,EAAeA,WAAWC,EAA1B,EAA0BA,OAAOC,EAAjC,EAAiCA,UAAUC,EAA3C,EAA2CA,gBAAgBC,EAA3D,EAA2DA,gBAAgBC,EAA3E,EAA2EA,KAC3E,OACE,gCACE,oBAAIC,UAAWC,IAAOR,MAAtB,SAA8BA,KAC5BC,IACsB,UAAtBC,EAAOO,WAAwB,sBAAKF,UAAWC,IAAOE,MAAvB,UACR,IAApBL,EAAsB,mBAAGE,UAAWC,IAAOG,OAArB,iCAAqD,mBAAGJ,UAAWC,IAAOG,OAArB,qCACxD,IAAnBN,EAAqB,gCAAK,yBAAQE,UAAWC,IAAOI,IAAKC,QAAS,WAAKT,KAA7C,yBAA8ED,EAA9E,OAAkG,oBAAGI,UAAWC,IAAOM,KAArB,kCAAkD,EAAIT,QAA2B,gCAAK,mBAAGE,UAAWC,IAAO,aAArB,SAA6C,UAATF,EAAkB,YAAa,cAAgB,oBAAGC,UAAWC,IAAOM,KAArB,8BAA8C,EAAIZ,EAAOa,YAAYC,UAAUC,gBACtX,sBAAKV,UAAWC,IAAOE,MAAvB,UACsB,IAApBL,EAAuB,mBAAGE,UAAWC,IAAOG,OAArB,wBAA6C,mBAAGJ,UAAWC,IAAOG,OAArB,qDAChD,IAApBN,EAAsB,yEAAkD,gCAAK,mBAAGE,UAAWC,IAAO,aAArB,SAA8C,UAATF,EAAkB,YAAa,cAAgB,oBAAGC,UAAWC,IAAOM,KAArB,8BAA6C,EAAIZ,EAAOa,YAAYC,UAAUC,wB,GAlBlNC,a,iDCApCC,EAAaC,EAAQ,IAGNC,E,kDACnB,WAAYxB,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,GACb,EAAKwB,SAAWC,IAAMC,YACtB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,WAAa,EAAKA,WAAWD,KAAhB,gBAClB,EAAKE,gBAAkB,EAAKA,gBAAgBF,KAArB,gBACvB,EAAKG,YAAc,EAAKA,YAAYH,KAAjB,gBARF,E,gDAUnB,WAAgB,IAAD,OACb3B,KAAKF,MAAMK,OAAOa,YAAYe,OAAOC,SAAQ,SAACC,GAC5C,IAAIC,EAAQ,EAAKX,SAASY,SAC1BD,EAAQA,EAAME,SAASH,GAAGI,mBACpBC,UAAUC,IAAI9B,IAAO+B,W,wBAG/B,WAAc,IAAD,OACXxC,KAAKF,MAAMK,OAAOa,YAAYyB,KAAKT,SAAQ,SAACC,GAC1C,IAAIC,EAAQ,EAAKX,SAASY,SAC1BD,EAAQA,EAAME,SAASH,GAAGI,mBACpBC,UAAUC,IAAI9B,IAAOiC,U,6BAG/B,WAAmB,IAAD,OAChB1C,KAAKF,MAAMK,OAAOa,YAAYC,UAAUe,SAAQ,SAACW,GAAS,IAAD,gBACvCA,GADuC,IACvD,2BAAqB,CAAC,IAAXV,EAAU,QACfC,EAAQ,EAAKX,SAASY,SAC1BD,EAAQA,EAAME,SAASH,GAAGI,mBACpBC,UAAUC,IAAI9B,IAAOmC,OAJ0B,oC,yBAS3D,WAAc,IAAD,OACXV,EAAQlC,KAAKuB,SAASY,QAAQC,UAClCF,EAAQW,MAAMC,KAAKZ,IACbF,SAAQ,SAACe,EAAMC,GAChB,EAAKlD,MAAMmD,aAAaC,aAAaC,SAASH,GAC/CD,EAAMV,kBAAkBC,UAAUc,OAAO3C,IAAO4C,SAAQ,GAExDN,EAAMV,kBAAkBC,UAAUc,OAAO3C,IAAO4C,SAAQ,Q,+BAI1D,WACsC,aAAjCrD,KAAKF,MAAMK,OAAOO,YACnBV,KAAKF,MAAMwD,mB,gCAGf,WAAsB,IAAD,OAEnB,GAAqC,UAAjCtD,KAAKF,MAAMK,OAAOO,WAAwB,CAAC,IAAD,gBACtBV,KAAKF,MAAMK,OAAOa,YAAYuC,OADR,IACzC,2BAAwD,SAClDC,YAAYxB,SAAQ,SAACC,GAC1B,IAAIC,EAAQ,EAAKX,SAASY,SAC1BD,EAAQA,EAAME,SAASH,GAAGI,mBACpBC,UAAUC,IAAI9B,IAAOgD,UALa,+BAU9CzD,KAAK0B,eAEL1B,KAAK4B,aAEL5B,KAAK6B,kBAE+B,UAAjC7B,KAAKF,MAAMK,OAAOO,YACnBV,KAAK8B,YAAY9B,KAAKF,MAAMmD,cAE9BS,QAAQC,IAAI3D,KAAKF,MAAMK,OAAOa,YAAYuC,S,oBAG5C,WACE,MAAiFvD,KAAKF,MAA9EK,EAAR,EAAQA,OAAOyD,EAAf,EAAeA,aAAaxD,EAA5B,EAA4BA,UAAUyD,EAAtC,EAAsCA,WAAWC,EAAjD,EAAiDA,aAAaC,EAA9D,EAA8DA,gBAC9D,MAA8B,UAAtB5D,EAAOO,WACf,qBAAKsD,IAAKhE,KAAKuB,SAAU0C,GAAI9D,EAAOO,WAAa,SAAUF,UAAWY,EAAWX,IAAO,cAAe,SAAUyD,WAAY,WAAMJ,KAAnI,SACG3D,EAAOa,YAAYmD,MAAMC,KAAI,SAACC,EAAErB,GAAS,OAAO,qBAAKiB,GAAII,EAAG7D,UAAWC,IAAOyB,MAA9B,SAC/C,wBAAQ1B,UAAWC,IAAOI,IAAKC,QAAS,WAAKiD,KAAoBO,YAAa,WAAKT,EAAW,CAACU,SAASvB,EAAM5C,UAAUA,KAAxH,SACID,EAAOa,YAAYe,OAAOoB,SAASH,IAAW,cAAC,IAAD,KAAsB7C,EAAOa,YAAYC,UAAUuD,MAAM,SAAAC,GAAQ,OAAOA,EAAGtB,SAASH,OAAc,cAAC,IAAD,KAAmB7C,EAAOa,YAAYyB,KAAKU,SAASH,IAAW,cAAC,IAAD,OAF1HqB,EAAErB,QAM9F,qBAAKgB,IAAKhE,KAAKuB,SAAU0C,GAAI9D,EAAOO,WAAa,SAAUF,UAAWY,EAAWX,IAAO,cAAe,SAAvG,SACEN,EAAOa,YAAYmD,MAAMC,KAAI,SAACC,EAAErB,GAAS,OAAO,qBAAKiB,GAAII,EAAG7D,UAAWC,IAAOyB,MAA9B,SAC/C,wBAAQ1B,UAAWC,IAAOI,IAAKC,QAAS,SAAC4D,GAAKd,EAAac,EAAEC,OAAO3B,IAApE,SACI7C,EAAOa,YAAYe,OAAOoB,SAASH,IAAW,cAAC,IAAD,KAAsB7C,EAAOa,YAAYC,UAAUuD,MAAM,SAAAC,GAAQ,OAAOA,EAAGtB,SAASH,OAAc,cAAC,IAAD,KAAmB7C,EAAOa,YAAYyB,KAAKU,SAASH,IAAW,cAAC,IAAD,OAF1HqB,EAAErB,Y,GAtF1D7B,aCNpByD,E,WACnB,WAAY1D,GAAS,oBAqBnBlB,KAAKkB,OAASA,EACdlB,KAAK6E,cAAgB,IAAIhC,MAAM3B,GAAQ4D,KAAK,MAC5C9E,KAAK+E,UAtBgB,SAACC,GACpB,IAAIvB,EACJ,OAAQuB,GACN,KAAK,EACHvB,EAAO,UACP,MACF,KAAK,EACHA,EAAO,aACP,MACF,KAAK,EACHA,EAAO,YACP,MAEF,QACEA,EAAO,YAGX,OAAOA,EAKQwB,CAAajF,KAAKkB,Q,uCAErC,SAAIqD,GACF,OAAIA,GAAY,GAAKA,GAAYvE,KAAKkB,OAAS,IAC7ClB,KAAK6E,cAAcN,GAAY,OACxB,K,sCAKX,SAAyBA,GACvB,OAAOvE,KAAK6E,cAAcN,K,oBAE5B,WACE,OAAOvE,KAAK6E,cAAcK,OAAM,SAACC,GAAD,MAAiB,QAARA,S,KAQvCC,EAAa,CALL,IAAIR,EAAK,GACN,IAAIA,EAAK,GACV,IAAIA,EAAK,GACN,IAAIA,EAAK,GACT,IAAIA,EAAK,IAOtBS,EAAgB,CALV,IAAIT,EAAK,GACT,IAAIA,EAAK,GACT,IAAIA,EAAK,GACT,IAAIA,EAAK,GACT,IAAIA,EAAK,IAGfU,E,WACJ,aAAe,oBACbtF,KAAKmnE,KAAKuD,MAAQ,GACbvD,KAAKyC,KAAO,GACZzC,KAAK+B,OAAS,GACd/B,KAAKiB,UAAY,G,6CAEnB,SAAUwC,EAAMD,GAGd,IACI+B,EAAmB,GACnBpD,EAFQnC,KAAKmE,MAAMqB,QAAQhC,EAAYe,UAI3C,GAA8B,aAA1Bf,EAAYpD,UAA0B,CAGxC,GAAI+B,EAA8B,IAAnBsB,EAAKvC,OAAS,GAFnB,GAGR,MAAO,6BAGT,KAAOqE,EAAiBrE,SAAWuC,EAAKvC,QACtCqE,EAAiBE,KAAKtD,GACtBA,GAAW,QAER,GAA8B,eAA1BqB,EAAYpD,UAA4B,CAEjD,IAAIsF,EAAyC,IAAlCC,SAASxD,EAAU,GAAI,IAAM,GAIxC,GAHAuD,GAAO,EAGHvD,EAAUsB,EAAKvC,OAAS,EAAIwE,EAC9B,MAAO,6BAET,KAAOH,EAAiBrE,SAAWuC,EAAKvC,QACtCqE,EAAiBE,KAAKtD,GACtBA,GAAW,EAKf,GAAInC,KAAK4F,SAASL,GAChB,MAAO,8BAEP9B,EAAKD,YAAc+B,EACnBvF,KAAKuD,MAAMkC,KAAKhC,K,sBAGpB,SAASoC,GAAQ,IAAD,OACVC,GAAS,EAQb,OAPAD,EAAM7D,SAAQ,SAACC,GAAO,IAAD,gBACD,EAAKsB,OADJ,IACnB,2BAA8B,SACpBC,YAAYL,SAASlB,KAC3B6D,GAAS,IAHM,kCAOdA,I,2BAET,SAActC,GAEZ,IAFyB,EAErBvB,EAAIjC,KAAKmE,MAAMqB,QAAQhC,GACvBd,GAAM,EAHe,cAIP1C,KAAKuD,OAJE,IAIzB,2BAA8B,CAAC,IAApBwC,EAAmB,QAC5B,GAAIA,EAAIvC,YAAYL,SAASlB,GAAI,CAC/B,IAAI0C,EAASoB,EAAIvC,YAAYgC,QAAQvD,GACrC8D,EAAIrD,IAAIiC,GACR3E,KAAKyC,KAAKgD,KAAKxD,GACfS,GAAM,EACFqD,EAAIC,UACNhG,KAAKiB,UAAUwE,KAAKM,EAAIvC,eAXL,8BAepBd,GACH1C,KAAK+B,OAAO0D,KAAKxD,K,yBAIrB,WAEE,OAAOjC,KAAKuD,MAAM2B,OAAM,SAACzB,GACvB,OAAyB,IAAlBA,EAAKuC,gB,KAWZC,EACJ,WAAY9F,EAAQgE,GAAQ,oBAC1BnE,KAAKU,WAAaP,EAClBH,KAAKgB,YAAcmD,GCrPF+B,E,kDACnB,WAAYpG,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXoG,MAAO,IAAIF,EAAO,QAAS,IAAIX,GAC/Bc,SAAU,IAAIH,EAAO,WAAY,IAAIX,GACrCe,UAAU,EACV9F,KAAM,QAENH,UAAW,aAEXiD,QAAS,CAAEH,aAAa,GAAGoD,eAAe,MAE1ChG,gBAAiB,GAGnB,EAAKiG,gBAAkB,EAAKA,gBAAgB5E,KAArB,gBACvB,EAAKiC,aAAe,EAAKA,aAAajC,KAAlB,gBACpB,EAAK6E,UAAY,EAAKA,UAAU7E,KAAf,gBACjB,EAAKzB,WAAa,EAAKA,WAAWyB,KAAhB,gBAClB,EAAK8E,WAAa,EAAKA,WAAW9E,KAAhB,gBAClB,EAAK+E,eAAiB,EAAKA,eAAe/E,KAApB,gBACtB,EAAKgF,cAAgB,EAAKA,cAAchF,KAAnB,gBACrB,EAAKtB,gBAAkB,EAAKA,gBAAgBsB,KAArB,gBACvB,EAAKkC,WAAa,EAAKA,WAAWlC,KAAhB,gBAClB,EAAKmC,aAAe,EAAKA,aAAanC,KAAlB,gBACpB,EAAKoC,gBAAkB,EAAKA,gBAAgBpC,KAArB,gBAzBN,E,6CA4BnB,WACE3B,KAAK4G,SAAS,M,wBAGhB,WACE5G,KAAK4G,SAAS,CACZrG,KAA0B,UAApBP,KAAKD,MAAMQ,KAAmB,WAAa,Y,6BAIrD,WACE,IAAM0C,EAAejD,KAAKD,MAAMsD,QAChC,GAAGJ,EAAaqD,gBAAiD,IAA/BtG,KAAKD,MAAMO,gBAAsB,CAGjE,IAAImD,EAAO4B,EAAcrF,KAAKD,MAAMO,iBACpCmD,EAAKD,YAAcP,EAAaC,aAChC,IAAI2D,EAAkBC,OAAOC,OAAO,GAAI/G,KAAKD,MAAMoG,OACnDU,EAAgB7F,YAAYuC,MAAMkC,KAAKhC,GACvCzD,KAAK4G,SAAS,CAACT,MAAMU,IACrB7G,KAAK4G,UAAS,SAAC7G,GACb,MAAO,CAACO,gBAAiBP,EAAMO,gBAAkB,MAGrDoD,QAAQC,IAAI3D,KAAKD,MAAMoG,S,6BAEzB,WAKE,IAJA,IAAMa,EAAqBF,OAAOC,OAAO,GAAG/G,KAAKD,MAAMqG,UACjDjC,EAAQ6C,EAAmBhG,YAAYmD,MACzC8C,EAAc,EACdC,EAAY,EACO,IAAhBD,GAAmB,CACxB,IAAIE,EAAgBhD,EAAMiD,KAAKC,MAAsB,GAAhBD,KAAKE,WACtCC,EAAiBH,KAAKC,MAAsB,EAAhBD,KAAKE,UACrCC,EAAiBA,EAAiB,aAAe,WACjDP,EAAmBhG,YAAYwG,UAAUpC,EAAW8B,GAAW,CAAC3C,SAAU4C,EAAe/G,UAAWmH,IACpGvH,KAAK4G,SAAS,CAACR,SAAUY,IACrBhH,KAAKD,MAAMqG,SAASpF,YAAYuC,MAAMrC,OAASgG,IACjDA,GAAa,EACbD,GAAe,M,0BAKrB,SAAatC,EAAQ3B,GAAQ,IAAD,OAC1BU,QAAQC,IAAI3D,KAAKD,OACjB,IAAMI,EAASH,KAAKD,MAAMqG,SAG1B,GAAkC,IAA/BpG,KAAKD,MAAMO,gBAAd,CAIA,GACEH,EAAOa,YAAYe,OAAOoB,SAASH,IACnC7C,EAAOa,YAAYyB,KAAKU,SAASH,GAEjC,OAAOU,QAAQC,IAAR,sEAIT,IAAIH,EAAcmB,EAAO8C,cAAcxD,GAKvC,GAJAjE,KAAK4G,SAAS,CACZzG,OAAQA,EAAOa,YAAY0G,cAAclE,KAGvCxD,KAAKE,WAAWC,GAClBH,KAAK4G,SAAS,CAAEP,UAAU,IAC1B3C,QAAQC,IAAI,gCACP,CAEN,IACIgE,EADiBhD,EAAO8C,cAAcA,cACZG,iBAAiB,UAC9C5H,KAAK0G,eAAeiB,GAGpB3H,KAAKyG,aACLoB,YAAW,WACT,EAAKrB,UAAU,EAAKzG,MAAMoG,OAC1B,EAAKQ,cAAcgB,KAClB,S,uBAKP,SAAUxH,GAER,IADA,IAAIwE,EAASyC,KAAKC,MAAsB,GAAhBD,KAAKE,UAE3BnH,EAAOa,YAAYe,OAAOoB,SAASwB,IACnCxE,EAAOa,YAAYyB,KAAKU,SAASwB,IAEjCA,EAASyC,KAAKC,MAAsB,GAAhBD,KAAKE,UAE3B,IAAI9D,EAAcrD,EAAOa,YAAYmD,MAAMQ,GAI3C3E,KAAK4G,SAAS,CACXzG,OAAQA,EAAOa,YAAY0G,cAAclE,KAGxCxD,KAAKE,WAAWC,GAClBH,KAAK4G,SAAS,CAAEP,UAAU,IAE1BrG,KAAKyG,e,4BAKT,SAAeqB,GAAS,IAAD,gBACHA,GADG,IACrB,2BAA2B,SACpBC,aAAa,YAAW,IAFV,iC,2BAKvB,SAAcD,GAAS,IAAD,gBACDA,GADC,IACnB,2BAA2B,SACrBE,gBAAgB,aAFH,iC,wBAKtB,SAAW7H,GACT,OAAOA,EAAOa,YAAYiH,gB,6BAE5B,WACEjI,KAAK4G,UAAS,SAAC7G,GACf,MAAQ,CAACK,UAA+B,eAApBL,EAAMK,UAA4B,WAAW,mB,wBAInE,SAAWoD,GAET,GAAkC,IAA/BxD,KAAKD,MAAMO,gBAAd,CAGA,IAAImD,EAAO2B,EAAWpF,KAAKD,MAAMO,iBAE7B4H,EAAa1E,EAAYe,SACzBgB,EAAiB,GAEjB4C,GAAU,EACd,GAA6B,aAA1B3E,EAAYpD,UAAyB,CACtC,IACIgI,EAAWF,EAAiC,IAAnBzE,EAAKvC,OAAS,GACtCkH,EAFK,KAGND,GAAU,GAEd,IAAI,IAAIlG,EAAIiG,EAAYjG,GAAKmG,IAC3B7C,EAAiBE,KAAKxD,KAClBA,GAPI,KAK6BA,GAAK,UAMxC,GAA8B,eAA1BuB,EAAYpD,UAA2B,CAC/C,IAAIsF,EAA4C,IAArCC,SAASuC,EAAa,GAAI,IAAM,GAC3CxC,GAAO,EACP,IAAI0C,EAAWF,EAAazE,EAAKvC,OAAQ,EACtCkH,EAAW1C,IACZyC,GAAU,GAEZ,IAAI,IAAIlG,EAAIiG,EAAYjG,GAAKmG,IAC3B7C,EAAiBE,KAAKxD,KACnBA,GAAKyD,IAF6BzD,MAS1C,IADA,IAAMsB,EAAQvD,KAAKD,MAAMoG,MAAMnF,YAAYuC,MAC3C,MAAgBgC,EAAhB,eAAkC,CAA7B,IAA6B,EAAvBtD,EAAC,KAAsB,cACbsB,GADa,IAChC,2BAA0B,SAClBC,YAAYL,SAASlB,KAC3BkG,GAAU,IAHoB,+BAOlCnI,KAAK4G,SAAS,CAACvD,QAAS,CAACH,aAAaqC,EAAkBe,eAAgB6B,Q,0BAEzE,WACEnI,KAAK4G,SAAS,CACZvD,QAAS,CAAEH,aAAa,GAAGoD,eAAe,U,gCAG9C,WAEE,GADA5C,QAAQC,IAAI,cACR3D,KAAKD,MAAMsG,SAAU,CAEvB,IAAMgC,EAAeC,SAASV,iBAAiB,iBAC/C5H,KAAK0G,eAAe2B,M,+BAGxB,c,oBAEA,WACE,OACE,qCACGrI,KAAKD,MAAMsG,UACV,sBAAK7F,UAAWC,IAAO8H,YAAvB,UACE,4CAAevI,KAAKD,MAAMQ,QAC1B,yBAAQC,UAAWC,IAAO+H,QAA1B,UACE,cAAC,IAAD,IADF,gBAMJ,sBAAKhI,UAAWC,IAAO,kBAAvB,UACE,sBAAKD,UAAWC,IAAON,OAAvB,UACE,cAAC,EAAD,CAAcF,MAAM,QAAQC,WAAYF,KAAKD,MAAMsG,SACnDlG,OAAQH,KAAKD,MAAMoG,MAAO/F,UAAWJ,KAAKD,MAAMK,UAChDC,gBAAiBL,KAAKK,gBACtBC,gBAAiBN,KAAKD,MAAMO,gBAC5BC,KAAMP,KAAKD,MAAMQ,OAEjB,cAAC,EAAD,CACEJ,OAAQH,KAAKD,MAAMoG,MACnBvC,aAAc5D,KAAK4D,aACnBxD,UAAWJ,KAAKD,MAAMK,UACtByD,WAAY7D,KAAK6D,WACjBZ,aAAcjD,KAAKD,MAAMsD,QACzBS,aAAc9D,KAAK8D,aACnBC,gBAAiB/D,KAAK+D,gBACtByC,UAAWxG,KAAKwG,eAGpB,sBAAKhG,UAAWC,IAAON,OAAvB,UACE,cAAC,EAAD,CACEF,MAAM,iBACNC,WAAYF,KAAKD,MAAMsG,SACvBlG,OAAQH,KAAKD,MAAMqG,SACnB9F,gBAAiBN,KAAKD,MAAMO,kBAG5B,cAAC,EAAD,CACAH,OAAQH,KAAKD,MAAMqG,SACnB9C,eAAgBtD,KAAKuG,gBACrB3C,aAAc5D,KAAK4D,4B,GAtQWzC,a,iBCJvBsH,E,4JACnB,WACE,OACE,qCACE,oBAAIjI,UAAWC,IAAOR,MAAtB,yBACA,qBAAKO,UAAWC,IAAM,SAAtB,SACE,2M,GAN0BU,aCSrBuH,MATf,WACE,OACE,sBAAKzE,GAAG,gBAAR,UACE,cAAC,EAAD,IACA,cAAC,EAAD,QCKS0E,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFhB,SAASiB,eAAe,SAM1BZ,K,kBCfAhJ,EAAOC,QAAU,CAAC,MAAQ,4BAA4B,MAAQ,4BAA4B,OAAS,6BAA6B,IAAM,0BAA0B,KAAO,2BAA2B,YAAY,kC,kBCA9MD,EAAOC,QAAU,CAAC,aAAa,gCAAgC,MAAQ,2BAA2B,IAAM,yBAAyB,KAAO,0BAA0B,KAAO,0BAA0B,IAAM,yBAAyB,KAAO,0BAA0B,QAAU,gC","file":"static/js/main.022defba.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"game-container\":\"gameControllerStyles_game-container__1kRNe\",\"player\":\"gameControllerStyles_player__1Ae0B\",\"winnerPanel\":\"gameControllerStyles_winnerPanel__8tltV\",\"restart\":\"gameControllerStyles_restart__23Pzu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"headerStyles_title__1wRWs\",\"disc_div\":\"headerStyles_disc_div__2tlVB\"};","import React, { Component } from \"react\";\nimport styles from \"../playerStatus.module.css\";\n\nexport default class PlayerStatus extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {};\n  }\n\n  render() {\n    const { title, isGameOver,player,dimension,changeDimension,shipsPositioned,turn } = this.props;\n    return (\n      <div>\n        <h1 className={styles.title}>{title}</h1>\n        {!isGameOver && (\n          player.playerName === \"Human\"? <div className={styles.panel}>\n            {shipsPositioned !== 5?<p className={styles.prompt}>position your ships</p>:<p className={styles.prompt}>Attack Computer's Board</p>}\n            {shipsPositioned !==5?<div><button className={styles.btn} onClick={()=>{changeDimension()}}>Dimension : {dimension} </button><p className={styles.pill} >ships left to place: {5 - shipsPositioned}</p></div>:<div><p className={styles[\"turn-pill\"]}>{turn === \"Human\"? \"your turn\": \"waiting..\"}</p><p className={styles.pill} >Ships Remaining: {5 - player.playerBoard.sunkShips.length}</p></div>}</div>\n          :<div className={styles.panel}>\n            {shipsPositioned !== 5? <p className={styles.prompt} >waiting...</p>:<p className={styles.prompt} >click on this board to sink their ships</p>}\n            {shipsPositioned !== 5?<div>waiting for you to position your ships</div>:<div><p className={styles[\"turn-pill\"]} >{turn === \"Human\"? \"your turn\": \"waiting..\"}</p><p className={styles.pill}>Ships Remaining: {5 - player.playerBoard.sunkShips.length}</p></div>}\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { GiExplosionRays, GiShipWreck, GiWaterSplash } from \"react-icons/gi\";\nimport styles from \"../playerBoard.module.css\";\nconst classNames = require(\"classnames\");\n\n\nexport default class PlayerBoard extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {};\n    this.boardRef = React.createRef();\n    this.renderMisses = this.renderMisses.bind(this);\n    this.renderHits = this.renderHits.bind(this);\n    this.renderSunkShips = this.renderSunkShips.bind(this);\n    this.showPreview = this.showPreview.bind(this);\n  }\n  renderMisses() {\n    this.props.player.playerBoard.misses.forEach((i) => {\n      let block = this.boardRef.current;\n      block = block.children[i].firstElementChild;\n      block.classList.add(styles.miss);\n    });\n  }\n  renderHits() {\n    this.props.player.playerBoard.hits.forEach((i) => {\n      let block = this.boardRef.current;\n      block = block.children[i].firstElementChild;\n      block.classList.add(styles.hit);\n    });\n  }\n  renderSunkShips() {\n    this.props.player.playerBoard.sunkShips.forEach((arr) => {\n      for (const i of arr) {\n        let block = this.boardRef.current;\n        block = block.children[i].firstElementChild;\n        block.classList.add(styles.sunk);\n      }\n    });\n  }\n  // apparently I cant get access the other parts of th preview object\n  showPreview(){\nlet block = this.boardRef.current.children\nblock = Array.from(block);\nblock.forEach((child,index) => {\n  if(this.props.previewState.previewArray.includes(index)){\n    child.firstElementChild.classList.toggle(styles.preview,true);\n  }else{\n    child.firstElementChild.classList.toggle(styles.preview,false);\n  }\n})\n}\n  componentDidMount() {\n    if(this.props.player.playerName === \"Computer\"){\n      this.props.randoPlacement();\n    }\n  }\n  componentDidUpdate() {\n    //   renders blocks with ships\n    if (this.props.player.playerName === \"Human\") {\n         for (const ship of this.props.player.playerBoard.fleet) {\n          ship.coordinates.forEach((i) => {\n          let block = this.boardRef.current;\n          block = block.children[i].firstElementChild;\n          block.classList.add(styles.ship);\n        });\n      }\n    }\n    // renders misses\n    this.renderMisses();\n    // renders hits\n    this.renderHits();\n    // render sunk ships\n    this.renderSunkShips();\n    // render preview\n    if(this.props.player.playerName === \"Human\"){\n      this.showPreview(this.props.previewState);\n    }\n    console.log(this.props.player.playerBoard.fleet);\n  }\n\n  render() {\n    const { player,clickHandler,dimension,setPreview,resetPreview,playerPlacement} = this.props;\n    return (player.playerName === \"Human\"?\n    <div ref={this.boardRef} id={player.playerName + \"-board\"} className={classNames(styles[\"game-board\"], \"board\")} onMouseOut={()=> {resetPreview();}} >\n      {player.playerBoard.board.map((b,index)=>{return(<div id={b} className={styles.block} key={b+index}>\n        <button className={styles.btn} onClick={()=>{playerPlacement()}} onMouseOver={()=>{setPreview({position:index,dimension:dimension})}}>\n           {player.playerBoard.misses.includes(index) && (<GiWaterSplash />) || player.playerBoard.sunkShips.find( ar => { return ar.includes(index) }) && (<GiShipWreck/>) || player.playerBoard.hits.includes(index) && (<GiExplosionRays/>)}\n        </button>\n      </div>)})}\n    </div>\n    :<div ref={this.boardRef} id={player.playerName + \"-board\"} className={classNames(styles[\"game-board\"], \"board\")} >\n      {player.playerBoard.board.map((b,index)=>{return(<div id={b} className={styles.block} key={b+index}>\n        <button className={styles.btn} onClick={(e)=>{clickHandler(e.target,index)}}>\n           {player.playerBoard.misses.includes(index) && (<GiWaterSplash />) || player.playerBoard.sunkShips.find( ar => { return ar.includes(index) }) && (<GiShipWreck/>) || player.playerBoard.hits.includes(index) && (<GiExplosionRays/>)}\n        </button>\n      </div>)})}\n    </div>)\n  }\n}\n","export default class Ship {\n  constructor(length) {\n    const getShipClass = (l) => {\n      let ship;\n      switch (l) {\n        case 5:\n          ship = \"carrier\";\n          break;\n        case 4:\n          ship = \"battleship\";\n          break;\n        case 3:\n          ship = \"submarine\";\n          break;\n\n        default:\n          ship = \"destroyer\";\n          break;\n      }\n      return ship;\n    };\n\n    this.length = length;\n    this.shipStructure = new Array(length).fill(null);\n    this.shipClass = getShipClass(this.length);\n  }\n  hit(position) {\n    if (position >= 0 && position <= this.length - 1) {\n      this.shipStructure[position] = \"hit\";\n      return true;\n    } else {\n      return false;\n    }\n  }\n  getStructuralIntegrityAt(position) {\n    return this.shipStructure[position];\n  }\n  isSunk() {\n    return this.shipStructure.every((val) => val === \"hit\");\n  }\n}\nlet carrier = new Ship(5);\nlet battleship = new Ship(4);\nlet submarine = new Ship(3);\nlet destroyerOne = new Ship(2);\nlet destroyerTwo = new Ship(2);\nconst shipsArray = [carrier, battleship, submarine, destroyerOne, destroyerTwo];\nlet ship1 = new Ship(5);\nlet ship2 = new Ship(4);\nlet ship3 = new Ship(3);\nlet ship4 = new Ship(2);\nlet ship5 = new Ship(2);\nconst shipsArrayTwo = [ship1,ship2,ship3,ship4,ship5];\n//  A Good Idea would be to keep my battleships in an array. And not create them on the spot.\nclass GameBoard {\n  constructor() {\n    this.board = [\n      \"1A\",\n      \"1B\",\n      \"1C\",\n      \"1D\",\n      \"1E\",\n      \"1F\",\n      \"1G\",\n      \"1H\",\n      \"1I\",\n      \"1J\",\n      \"2A\",\n      \"2B\",\n      \"2C\",\n      \"2D\",\n      \"2E\",\n      \"2F\",\n      \"2G\",\n      \"2H\",\n      \"2I\",\n      \"2J\",\n      \"3A\",\n      \"3B\",\n      \"3C\",\n      \"3D\",\n      \"3E\",\n      \"3F\",\n      \"3G\",\n      \"3H\",\n      \"3I\",\n      \"3J\",\n      \"4A\",\n      \"4B\",\n      \"4C\",\n      \"4D\",\n      \"4E\",\n      \"4F\",\n      \"4G\",\n      \"4H\",\n      \"4I\",\n      \"4J\",\n      \"5A\",\n      \"5B\",\n      \"5C\",\n      \"5D\",\n      \"5E\",\n      \"5F\",\n      \"5G\",\n      \"5H\",\n      \"5I\",\n      \"5J\",\n      \"6A\",\n      \"6B\",\n      \"6C\",\n      \"6D\",\n      \"6E\",\n      \"6F\",\n      \"6G\",\n      \"6H\",\n      \"6I\",\n      \"6J\",\n      \"7A\",\n      \"7B\",\n      \"7C\",\n      \"7D\",\n      \"7E\",\n      \"7F\",\n      \"7G\",\n      \"7H\",\n      \"7I\",\n      \"7J\",\n      \"8A\",\n      \"8B\",\n      \"8C\",\n      \"8D\",\n      \"8E\",\n      \"8F\",\n      \"8G\",\n      \"8H\",\n      \"8I\",\n      \"8J\",\n      \"9A\",\n      \"9B\",\n      \"9C\",\n      \"9D\",\n      \"9E\",\n      \"9F\",\n      \"9G\",\n      \"9H\",\n      \"9I\",\n      \"9J\",\n      \"10A\",\n      \"10B\",\n      \"10C\",\n      \"10D\",\n      \"10E\",\n      \"10F\",\n      \"10G\",\n      \"10H\",\n      \"10I\",\n      \"10J\",\n    ];\n    this.fleet = [];\n    this.hits = [];\n    this.misses = [];\n    this.sunkShips = [];\n  }\n  placeShip(ship, coordinates) {\n    // I add ship to battleshipesArray after it is successfully placed, else throw error.\n    // check whether position has already been taken\n    let start = this.board.indexOf(coordinates.position);\n    let coordinatesArray = [];\n    let current = start;\n    // the rest of the coordinates are going to be determined by wether the ship goes horizontal or vertical\n    if (coordinates.dimension === \"vertical\") {\n      let cap = 99;\n\n      if (current + (ship.length - 1) * 10 > cap) {\n        return \"pick different coordinates\";\n      }\n\n      while (coordinatesArray.length !== ship.length) {\n        coordinatesArray.push(current);\n        current += 10;\n      }\n    } else if (coordinates.dimension === \"horizontal\") {\n      // check wether given coordinates will wrap to the row below\n      let cap = (parseInt(current / 10, 10) + 1) * 10;\n      cap -= 1;\n      // because indexes\n      // console.log(cap);\n      if (current + ship.length - 1 > cap) {\n        return \"pick different coordinates\";\n      }\n      while (coordinatesArray.length !== ship.length) {\n        coordinatesArray.push(current);\n        current += 1;\n      }\n    }\n    // set the coordinates on the ship object and push ship object to fleet\n    // before I add the coordinates to my ship object I first have to check in the fleet if any of the coordinates I'm trying to add to ship have already been used\n    if (this.isShared(coordinatesArray)) {\n      return \"you have shared coordinates\";\n    } else {\n      ship.coordinates = coordinatesArray;\n      this.fleet.push(ship);\n    }\n  }\n  isShared(array) {\n    let shared = false;\n    array.forEach((i) => {\n      for (const obj of this.fleet) {\n        if (obj.coordinates.includes(i)) {\n          shared = true;\n        }\n      }\n    });\n    return shared;\n  }\n  receiveAttack(coordinates) {\n    // i represents the a position on the board.\n    let i = this.board.indexOf(coordinates);\n    let hit = false;\n    for (const obj of this.fleet) {\n      if (obj.coordinates.includes(i)) {\n        let target = obj.coordinates.indexOf(i);\n        obj.hit(target);\n        this.hits.push(i);\n        hit = true;\n        if (obj.isSunk()) {\n          this.sunkShips.push(obj.coordinates);\n        }\n      }\n    }\n    if (!hit) {\n      this.misses.push(i);\n    }\n  }\n  // game should be able to report whether or not all of their ships have been sunk.\n  isFleetSunk() {\n    // if all the ships are sunk, isFleetSunk method will return true else false.\n    return this.fleet.every((ship) => {\n      return ship.isSunk() === true;\n    });\n  }\n}\n// coordinates is an object. the object will have two variables position(A1) and dimension(can only be horizontal or vertical).\n// when before coordinates can be saved to ship object, I have to make sure that they are valid.\n// coordinates would follow a simple set of rules\n// 1. ship coordinates must not warp to row below. 2. two ships can not share the same block on the grid.\n\n// create Player\n// It only makes sense if Player is its own Class\nclass Player {\n  constructor(player, board) {\n    this.playerName = player;\n    this.playerBoard = board;\n  }\n  // player is ready function, checks whether player's fleet is 5;\n}\n// whats next for me is to implement game loop\n// player one will set up ships on his board\n// computer will set up ships on its board\n// player one will click on random block on grid which will represent\n// whether its a hit or a miss , the next turn goes to the computer\n// once a ship been sunk, it will be displayed\nexport { GameBoard, Player, shipsArray,shipsArrayTwo };\n","import React, { Component } from \"react\";\nimport PlayerStatus from \"./PlayerStatus\";\nimport { VscDebugRestart } from \"react-icons/vsc\";\nimport styles from \"../gameControllerStyles.module.css\";\nimport PlayerBoard from \"./PlayerBoard\";\nimport { GameBoard, Player, shipsArray,shipsArrayTwo } from \"../logic\";\n\nexport default class GameController extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      human: new Player(\"Human\", new GameBoard()),\n      computer: new Player(\"Computer\", new GameBoard()),\n      gameOver: false,\n      turn: \"Human\",\n      // dimenstion state\n      dimension: \"horizontal\",\n      // preview state\n      preview: { previewArray:[],isPreviewValid:null},\n      // sorte\n      shipsPositioned: 0,\n      //   Im thinking of setting a state to keep track on the game's progress.\n    };\n    this.randomPlacement = this.randomPlacement.bind(this);\n    this.clickHandler = this.clickHandler.bind(this);\n    this.compsTurn = this.compsTurn.bind(this);\n    this.isGameOver = this.isGameOver.bind(this);\n    this.changeTurn = this.changeTurn.bind(this);\n    this.disableButtons = this.disableButtons.bind(this);\n    this.enableButtons = this.enableButtons.bind(this);\n    this.changeDimension = this.changeDimension.bind(this);\n    this.setPreview = this.setPreview.bind(this);\n    this.resetPreview = this.resetPreview.bind(this);\n    this.playerPlacement = this.playerPlacement.bind(this);\n  }\n  //TODO Add restart game functionality \n  playAgain(){\n    this.setState({})\n  }\n  //!   I don't trust this function but is seems to work for now\n  changeTurn() {\n    this.setState({\n      turn: this.state.turn === \"Human\" ? \"Computer\" : \"Human\",\n    });\n  }\n  //! ship Placement for player\n  playerPlacement(){\n    const previewState = this.state.preview;\n    if(previewState.isPreviewValid && this.state.shipsPositioned !== 5){\n      //! let obj = shipsArray[this.state.shipsPositioned]\n      //! let ship = Object.assign({},obj);\n      let ship = shipsArrayTwo[this.state.shipsPositioned];\n      ship.coordinates = previewState.previewArray;\n      let humanStateClone = Object.assign({}, this.state.human);\n      humanStateClone.playerBoard.fleet.push(ship);    \n      this.setState({human:humanStateClone})\n      this.setState((state) =>{\n        return {shipsPositioned: state.shipsPositioned + 1}\n      })\n    }\n    console.log(this.state.human);\n  }\n  randomPlacement() {\n    const computerStateClone = Object.assign({},this.state.computer);\n    const board = computerStateClone.playerBoard.board;\n    let shipsPlaced = 0;\n    let shipIndex = 0;\n    while (shipsPlaced !== 5) {\n      let randoPosition = board[Math.round(Math.random() * 99)];\n      let randoDimension = Math.round(Math.random() * 1);\n      randoDimension = randoDimension ? \"horizontal\" : \"vertical\";\n      computerStateClone.playerBoard.placeShip(shipsArray[shipIndex],{position: randoPosition, dimension: randoDimension,})\n      this.setState({computer: computerStateClone});\n      if (this.state.computer.playerBoard.fleet.length > shipIndex) {\n        shipIndex += 1;\n        shipsPlaced += 1;\n      }\n    }\n  }\n  //   anything that has to do with updating state will be done here\n  clickHandler(target, index) {\n    console.log(this.state);\n    const player = this.state.computer;\n    // TODO make sure this only runs when player is human\n    // run only if all ships are positioned\n    if(this.state.shipsPositioned !== 5){\n      return;\n    }\n    // onclikck board being clicked receives attack\n    if (\n      player.playerBoard.misses.includes(index) ||\n      player.playerBoard.hits.includes(index)\n    ) {\n      return console.log(\n        `You've already picked these coordinates homes. Try different ones.`\n      );\n    }\n    let coordinates = target.parentElement.id;\n    this.setState({\n      player: player.playerBoard.receiveAttack(coordinates),\n    });\n    // after a hit check wether all the ships are sunk on computer\n    if (this.isGameOver(player)) {\n      this.setState({ gameOver: true });\n      console.log(\"game over Human guy wins\");\n    } else {\n      // disable computers buttons to prevent click while waiting for computer to make a move\n     let boardContainer = target.parentElement.parentElement;\n     let btnArray = boardContainer.querySelectorAll(\"button\");\n      this.disableButtons(btnArray);\n      // run function that will let computer take a turn\n   \n      this.changeTurn();\n      setTimeout(()=>{\n        this.compsTurn(this.state.human)\n        this.enableButtons(btnArray);\n      }, 1000); \n    }\n  }\n\n  //TODO make this run independently  \n  compsTurn(player) {\n    let target = Math.round(Math.random() * 99);\n    while (\n      player.playerBoard.misses.includes(target) ||\n      player.playerBoard.hits.includes(target)\n    ) {\n      target = Math.round(Math.random() * 99);\n    }\n    let coordinates = player.playerBoard.board[target];\n    // ! SUPER FIX THIS\n    //  let humanStateClone =  JSON.parse(JSON.stringify(player));\n    //   humanStateClone.playerBoard.receiveAttack(coordinates);\n    this.setState({\n       player: player.playerBoard.receiveAttack(coordinates),\n    });\n    //\n    if (this.isGameOver(player)) {\n      this.setState({ gameOver: true });\n    } else {\n      this.changeTurn();\n    }\n    \n  }\n    // function for disabling buttons\n  disableButtons(btnList){\n    for (const btn of btnList) {\n       btn.setAttribute(\"disabled\",true);\n     }\n  }\n  enableButtons(btnList){\n     for (const btn of btnList) {\n       btn.removeAttribute(\"disabled\");\n     }\n  }\n  isGameOver(player) {\n    return player.playerBoard.isFleetSunk();\n  }\n  changeDimension(){\n    this.setState((state)=>{\n    return  {dimension: state.dimension === \"horizontal\"? \"vertical\":\"horizontal\"}\n    })\n  }\n    // this function will be modelled after placeShip()\n  setPreview(coordinates){\n    // stop review if all ships have been positioned\n    if(this.state.shipsPositioned === 5){\n      return\n    }\n    let ship = shipsArray[this.state.shipsPositioned]\n    // will take board index directly\n    let startIndex = coordinates.position;\n    let coordinatesArray=[];\n    // it shouldnt be valid if it exceeds cap and when coordinates are shared\n    let isValid = true\n    if(coordinates.dimension === \"vertical\"){\n      let cap = 99;\n      let indexEnd = startIndex + (ship.length - 1) * 10;\n        if(indexEnd > cap){\n          isValid = false;\n        }\n      for(let i = startIndex; i <= indexEnd; i += 10){\n        coordinatesArray.push(i);\n        if( i >= cap){\n          break\n        }\n      }\n    }else if (coordinates.dimension === \"horizontal\"){\n      let cap = (parseInt(startIndex / 10, 10) + 1) * 10;\n      cap -= 1;\n      let indexEnd = startIndex + ship.length -1;\n      if(indexEnd > cap){\n        isValid = false;\n      }\n      for(let i = startIndex; i <= indexEnd; i++){\n        coordinatesArray.push(i);\n        if(i >= cap){\n          break;\n        }\n      }\n    }\n    // isShared\n   const fleet = this.state.human.playerBoard.fleet;\n   for (const i of coordinatesArray) {\n     for (const ship of fleet) {\n     if(ship.coordinates.includes(i)){\n       isValid = false;\n     }\n   }\n   }\n   this.setState({preview: {previewArray:coordinatesArray, isPreviewValid: isValid }} ) \n  }\n  resetPreview(){\n    this.setState({\n      preview: { previewArray:[],isPreviewValid:null}\n    })\n  }\n  componentDidUpdate() {\n    console.log(\"did update\");\n    if (this.state.gameOver) {\n      //  I want blocks not to respond, maybe I should add another class claaed\n      const buttonsArray = document.querySelectorAll(\".board button\");\n      this.disableButtons(buttonsArray);\n    }\n  }\n  componentDidMount() {}\n\n  render() {\n    return (\n      <>\n        {this.state.gameOver && (\n          <div className={styles.winnerPanel}>\n            <h1>Winner is {this.state.turn}</h1>\n            <button className={styles.restart}>\n              <VscDebugRestart />\n              Restart\n            </button>\n          </div>\n        )}\n        <div className={styles[\"game-container\"]}>\n          <div className={styles.player}>\n            <PlayerStatus title=\"Human\" isGameOver={this.state.gameOver}\n            player={this.state.human} dimension={this.state.dimension} \n            changeDimension={this.changeDimension}\n            shipsPositioned={this.state.shipsPositioned}\n            turn={this.state.turn}\n            />\n            <PlayerBoard\n              player={this.state.human}\n              clickHandler={this.clickHandler}\n              dimension={this.state.dimension}\n              setPreview={this.setPreview}\n              previewState={this.state.preview}\n              resetPreview={this.resetPreview}\n              playerPlacement={this.playerPlacement}\n              compsTurn={this.compsTurn}\n            />\n          </div>\n          <div className={styles.player}>\n            <PlayerStatus\n              title=\"Super-Computer\"\n              isGameOver={this.state.gameOver}\n              player={this.state.computer}\n              shipsPositioned={this.state.shipsPositioned}\n\n            />\n              <PlayerBoard\n              player={this.state.computer}\n              randoPlacement={this.randomPlacement}\n              clickHandler={this.clickHandler}\n            />\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n// randomly place ships on players boards.\n\n// how Ill go about making a preview of the blocks that have to be placed \n//  make an on hover event ,","import React, { Component } from \"react\";\nimport styles from \"../headerStyles.module.css\";\n\nexport default class Header extends Component {\n  render() {\n    return (\n      <>\n        <h1 className={styles.title}>Battleship_</h1>\n        <div className={styles[\"disc_div\"]}>\n          <p>\n            Feel the authentic thrill of the battle when you wage war on the\n            high seas in the game of Battleship. Take charge and command your\n            own fleet to defeat the enemy.\n          </p>\n        </div>\n      </>\n    );\n  }\n}\n","import GameController from \"./components/GameController\";\nimport Header from \"./components/Header\";\n\nfunction App() {\n  return (\n    <div id=\"app-container\">\n      <Header />\n      <GameController />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"playerStatus_title__KN9KP\",\"panel\":\"playerStatus_panel__2XWuH\",\"prompt\":\"playerStatus_prompt__3tg6X\",\"btn\":\"playerStatus_btn__28vGk\",\"pill\":\"playerStatus_pill__3X5_y\",\"turn-pill\":\"playerStatus_turn-pill__3z9vu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"game-board\":\"playerBoard_game-board__1u8TC\",\"block\":\"playerBoard_block__2XyRn\",\"btn\":\"playerBoard_btn__Bwbv_\",\"ship\":\"playerBoard_ship__2Uiyj\",\"miss\":\"playerBoard_miss__1L8LF\",\"hit\":\"playerBoard_hit__GwBGl\",\"sunk\":\"playerBoard_sunk__1H91D\",\"preview\":\"playerBoard_preview__2RnSw\"};"],"sourceRoot":""}